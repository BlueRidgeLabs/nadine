import os
import string
import random
import getpass

from django.contrib.auth.models import User
from django.core.management.base import BaseCommand, CommandError

EXAMPLE_FILE = "nadine/local_settings.example"
SETTINGS_FILE = "nadine/local_settings.py"
PROMPT = '> '

class LocalSettings():

    def __init__(self, filename):
        print("Loading %s" % filename)
        with open(filename) as f:
            self.settings = f.readlines()

        self.settings.append("\n# Settings Generated by ./manage.py setup\n")

    def get_line_number(self, key):
        for i, line in enumerate(self.settings):
            if line.startswith(key):
                return i
        return -1

    def get(self, key):
        line_number = self.get_line_number(key)
        if line_number > 0:
            return self.settings[line_number]
        return None

    def set(self, key, value):
        new_line = '%s = "%s"\n' % (key, value)
        line_number = self.get_line_number(key)
        if line_number >= 0:
            self.settings[line_number] = new_line
        else:
            self.settings.append(new_line)

    def set_database(self, db_name=None, db_user=None, db_pass=None):
        self.settings.append("DATABASES = {\n")
        self.settings.append("    'default': {\n")
        self.settings.append("        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n")
        if db_name:
            self.settings.append("         'NAME': '%s',\n" % db_name)
        if db_user:
            self.settings.append("         'USER': '%s',\n" % db_user)
        if db_pass:
            self.settings.append("         'PASSWORD': '%s',\n" % db_pass)
        self.settings.append("    }\n}\n")

    def save(self, filename):
        print("Writing new settings file...")
        with open(filename, 'w') as f:
            f.writelines(self.settings)


class Command(BaseCommand):
    help = "System Setup"
    requires_system_checks = False

    def handle(self, **options):

        try:
            print
            print("###################################")
            print("Nadine Local Settings Configuration")
            print("###################################")
            print
            self.setup()
        except KeyboardInterrupt:
            print
            print("Exiting without saving!")
            print

    def setup(self):
        current_user = getpass.getuser()

        # Test to see if SETTINGS_FILE exists and prompt to load it or remove it
        if os.path.isfile(SETTINGS_FILE):
            print ("File '%s' exists!" % SETTINGS_FILE)
            print ("Do you want to load the existing file? (Y, n)")
            load = raw_input(PROMPT).strip().lower()
            if load == "n":
                print("Current settings in '%s' will be lost!" % SETTINGS_FILE)
                filename = EXAMPLE_FILE
            else:
                filename = SETTINGS_FILE
        local_settings = LocalSettings(filename)

        # Secret Key
        secret_key = local_settings.get("SECRET_KEY")
        if not secret_key or len(secret_key) < 32:
            print("Generating random SECRET_KEY")
            secret_key = ''.join([random.SystemRandom().choice("{}{}".format(string.ascii_letters, string.digits)) for i in range(63)])
            local_settings.set('SECRET_KEY', secret_key)

        # Database Setup
        print
        print("### Database Setup ###")
        print("Database Name? (nadinedb)")
        db_name = raw_input(PROMPT).strip()
        if not db_name:
            db_name = "nadinedb"
        print("DATABASE_NAME = '%s'" % db_name)
        print("Database User? (%s)" % current_user)
        db_user = raw_input(PROMPT).strip()
        if not db_user:
            db_user = current_user
        print("DATABASE_USER = '%s'" % db_user)
        print("Database Password?")
        db_pass = raw_input(PROMPT).strip()
        if db_pass:
            print("DATABASE_PASSWORD = '%s'" % db_pass)
        local_settings.set_database(db_name, db_user, db_pass)

        #print ("Migrating database")
        #from django.conf import settings
        #from django.core import management
        #management.call_command("migrate")

        #print User.objects.count()
        # print("We need to create an administrator.")
        # print("Admin First Name?")
        # admin_first_name = raw_input(PROMPT).strip().title()
        # print("Admin Last Name?")
        # admin_last_name = raw_input(PROMPT).strip().title()
        # print("Admin Email Address?")
        # admin_email = raw_input(PROMPT).strip().lower()
        # print("Admin Password?")
        # admin_password = raw_input(PROMPT).strip()
        # admin_username = "%s_%s" % (admin_first_name.lower(), admin_last_name.lower())
        #admin_user = User.objects.create_superuser(admin_username, admin_email, admin_password)
        #admin_user.first_name = admin_first_name
        #admin_user.last_name = admin_last_name
        # print admin_username
        #admin_user.save()
        #print User.objects.count()

        # Timezone

        # Mail Server Setup

        # Should we save the new settings?
        print("Write new local_settings file? (y, N)")
        save = raw_input(PROMPT).strip().lower()
        if save == "y":
            print("Writing %s" % SETTINGS_FILE)
            local_settings.save(SETTINGS_FILE)
